{"version":3,"sources":["../../server/controllers/bookcontroller.js"],"names":["Books","req","res","status","send","booksDb","foundBookId","foundUserId","review","body","bookId","params","userId","userDb","filter","item","id","parseInt","length","newReviewId","reviewDb","newReview","push","reviewId","message","db","adminDb","bookName","description","author","quantity","publishYear","newId","newBook"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;IAGuBA,K;;;;;;;;AACnB;;;;;;;6BAQQC,G,EAAKC,G,EAAK;AACfA,UAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAAMC,OAA3B;AACA;;;+BAEUJ,G,EAAIC,G,EAAI;AACjB,UAAII,cAAc,KAAlB;AACA,UAAIC,cAAc,KAAlB;AAFiB,UAGVC,MAHU,GAGCP,IAAIQ,IAHL,CAGVD,MAHU;;AAIjB,UAAME,SAAST,IAAIU,MAAJ,CAAWD,MAA1B;AACA,UAAME,SAASX,IAAIU,MAAJ,CAAWC,MAA1B;AACF,UAAG,iBAAKC,MAAL,CAAYC,MAAZ,CAAmB;AAAA,eAAQC,KAAKC,EAAL,KAAYC,SAASL,MAAT,EAAgB,EAAhB,CAApB;AAAA,OAAnB,EAA4DM,MAA5D,KAAuE,CAA1E,EAA4E;AAC1E,YAAG,kBAAMb,OAAN,CAAcS,MAAd,CAAqB;AAAA,iBAAQC,KAAKL,MAAL,KAAgBO,SAASP,MAAT,EAAiB,EAAjB,CAAxB;AAAA,SAArB,EAAmEQ,MAAnE,KAA8E,CAAjF,EAAoF;;AAEzE,cAAI,OAAOV,MAAP,KAAiB,QAArB,EAAgC;AAC7B,gBAAMW,cAAc,mBAAQC,QAAR,CAAiBF,MAAjB,GAA0B,CAA9C;AACA,gBAAMG,YAAY,mBAAQD,QAAR,CAAiBE,IAAjB,CAAsB;AACpCC,wBAAUJ,WAD0B;AAEpCT,4BAFoC;AAGpCE,4BAHoC;AAIpCJ;AAJoC,aAAtB,CAAlB;AAMRF,0BAAc,IAAd;AACAC,0BAAc,IAAd;;AAEAL,gBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBoB,uBAAS,4BADW;AAEpBhB,sBAAQ,mBAAQY;;AAFI,aAArB;AAKC,WAhBI,MAgBE;AACLlB,gBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACfoB,uBAAS;AADM,aAArB;AAGD;AAED,SAxBN,MAwBY;AACPtB,cAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBoB,qBAAS;AADW,WAArB;AAGD;AACG,OA9BT,MA+BU;AACDtB,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACvBoB,mBAAS;AADc,SAArB;AAIN;AACD;;;kCAEavB,G,EAAKC,G,EAAI;AACtB,UAAMQ,SAAST,IAAIU,MAAJ,CAAWD,MAA1B;AACA,UAAME,SAASX,IAAIU,MAAJ,CAAWC,MAA1B;;AAEA,UAAGa,GAAGC,OAAH,CAAWZ,MAAX,CAAkB;AAAA,eAAQC,KAAKC,EAAL,KAAYC,SAASD,EAAT,EAAa,EAAb,CAApB;AAAA,OAAlB,EAAwDE,MAAxD,KAAmE,CAAtE,EAAyE;AACxE,YAAIS,YAAYC,WAAZ,IAA2BC,MAA3B,IAAqCC,QAArC,IAAiDC,WAArD,EAAkE;AAChE,cAAI,OAAOJ,QAAP,KAAoB,QAApB,IAAgC,OAAOC,WAAP,KAAuB,QAAvD,IACF,OAAOC,MAAP,KAAkB,QADhB,IAC4B,OAAOC,QAAP,KAAoB,QADhD,IAEF,OAAOC,WAAP,KAAuB,QAFzB,EAEmC;AAC9B,gBAAMC,QAAQ,kBAAM3B,OAAN,CAAca,MAAd,GAAuB,CAArC;AACA,gBAAMe,UAAU,kBAAM5B,OAAN,CAAciB,IAAd,CAAmB;AACjCZ,sBAAQsB,KADyB;AAEjCL,gCAFiC;AAGjCC,sCAHiC;AAIjCC,4BAJiC;AAKjCC,gCALiC;AAMjCC;AANiC,aAAnB,CAAhB;AAQE,gBAAIE,OAAJ,EAAa;AACX/B,kBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACrBoB,yBAAS;;AADY,eAArB;AAID,aALD,MAKO;AACLtB,kBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACfoB,yBAAS;AADM,eAArB;AAGD;AAEL,WAvBH,MAuBS;AACPtB,gBAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACpBoB,uBAAS;AADW,aAArB;AAGD;AACG,SA7BN,MA6BY;AACTtB,cAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBoB,qBAAS;;AADU,WAArB;AAID;AACH,OApCA,MAoCM;AACCtB,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACvBoB,mBAAS;AADc,SAArB;AAIN;AACF;;;;;;kBAxGgBxB,K","file":"bookcontroller.js","sourcesContent":["import books from '../models/booksDb';\r\nimport user from '../models/userDb';\r\nimport reviews from '../models/reviewDb';\r\n\r\n/**\r\n  * @class Books\r\n  */\r\n  export default class Books {\r\n    /**\r\n   *\r\n   * @param {object} req \r\n   * @param {object} res\r\n   * @return {object} json object\r\n   */\r\n   \r\n\r\n   getBooks(req, res) {\r\n       res.status(200).send(books.booksDb);\r\n      }\r\n\r\n      reviewBook(req,res){\r\n        let foundBookId = false;\r\n        let foundUserId = false;\r\n        const {review } = req.body;\r\n        const bookId = req.params.bookId;\r\n        const userId = req.params.userId;\r\n      if(user.userDb.filter(item => item.id === parseInt(userId,10)).length === 1){\r\n        if(books.booksDb.filter(item => item.bookId === parseInt(bookId, 10)).length === 1) {\r\n            \r\n                   if (typeof review=== 'string' ) {\r\n                      const newReviewId = reviews.reviewDb.length + 1;\r\n                      const newReview = reviews.reviewDb.push({\r\n                          reviewId: newReviewId,\r\n                          bookId,\r\n                          userId,\r\n                          review\r\n                      });\r\n              foundBookId = true;\r\n              foundUserId = true;\r\n          \r\n              res.status(201).send({\r\n               message: 'book review was successful',\r\n               review: reviews.reviewDb\r\n                \r\n               });\r\n              } else {\r\n                res.status(400).send({\r\n                      message: 'kindly ensure all inputs are strings'\r\n                });\r\n              }\r\n               \r\n             } else {\r\n             res.status(400).send({\r\n              message: ' No book of such exists!'\r\n             });\r\n           }\r\n              } \r\n           else {\r\n               res.status(403).send({\r\n             message: 'you are not authorised to review a book, kindly register to gain priviledge!'\r\n          });\r\n          \r\n        }\r\n       }\r\n\r\n       makeFavorites(req, res){\r\n        const bookId = req.params.bookId;\r\n        const userId = req.params.userId;\r\n        \r\n        if(db.adminDb.filter(item => item.id === parseInt(id, 10)).length === 1) {\r\n         if (bookName && description && author && quantity && publishYear) { \r\n           if (typeof bookName === 'string' && typeof description === 'string' &&\r\n             typeof author === 'string' && typeof quantity === 'string' &&\r\n             typeof publishYear === 'string') {\r\n                const newId = books.booksDb.length + 1;\r\n                const newBook = books.booksDb.push({\r\n                  bookId: newId,\r\n                  bookName,\r\n                  description,\r\n                  author,\r\n                  quantity,\r\n                  publishYear\r\n                });\r\n                  if (newBook) {\r\n                    res.status(201).send({\r\n                    message: 'book added by Admin user was successfully',\r\n                    \r\n                    });\r\n                  } else {\r\n                    res.status(500).send({\r\n                          message: 'failed to create new, try again'\r\n                    });\r\n                  }\r\n               \r\n             } else {\r\n             res.status(400).send({\r\n              message: ' data must be in strings!'\r\n             });\r\n           }\r\n              } else {\r\n            res.status(400).send({\r\n              message: 'Incomplete book data!'\r\n             \r\n            });\r\n          }\r\n       } else {\r\n               res.status(400).send({\r\n             message: 'you are not authorised to add a book, kindly contact your system administrator!'\r\n          });\r\n          \r\n        };\r\n      }\r\n     \r\n  }"]}